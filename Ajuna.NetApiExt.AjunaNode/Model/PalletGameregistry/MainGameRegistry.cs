//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Ajuna.NetApi;
using Ajuna.NetApi.Model.Extrinsics;
using Ajuna.NetApi.Model.Meta;
using Ajuna.NetApi.Model.PalletGameregistry;
using Ajuna.NetApi.Model.PrimitiveTypes;
using Ajuna.NetApi.Model.SpCore;
using Ajuna.NetApi.Model.Types;
using Ajuna.NetApi.Model.Types.Base;
using Ajuna.NetApi.Model.Types.Primitive;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Ajuna.NetApi.Model.PalletGameRegistry
{
    
    
    public sealed class GameRegistryStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        public GameRegistryStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("GameRegistry", "MaxAcknowledgeBatch"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Ajuna.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("GameRegistry", "MaxQueueSize"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Ajuna.NetApi.Model.Types.Primitive.U8)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("GameRegistry", "MaxGamesPerBlock"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Ajuna.NetApi.Model.Types.Primitive.U8)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("GameRegistry", "GameQueues"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Ajuna.NetApi.Model.PalletGameregistry.GameEngine), typeof(Ajuna.NetApi.Model.PalletGameregistry.Queue)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("GameRegistry", "GameRequirements"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Ajuna.NetApi.Model.PalletGameregistry.GameEngine), typeof(BaseVec<Ajuna.NetApi.Model.PalletGameregistry.Requirement>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("GameRegistry", "GameRegistry"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Ajuna.NetApi.Model.PrimitiveTypes.H256), typeof(Ajuna.NetApi.Model.PalletGameregistry.GameEntry)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("GameRegistry", "Nonce"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Ajuna.NetApi.Model.Types.Primitive.U64)));
        }
        
        /// <summary>
        /// >> MaxAcknowledgeBatchParams
        ///  The maximum number of games that can be acknowledged in one batch
        /// </summary>
        public static string MaxAcknowledgeBatchParams()
        {
            return RequestGenerator.GetStorage("GameRegistry", "MaxAcknowledgeBatch", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> MaxAcknowledgeBatch
        ///  The maximum number of games that can be acknowledged in one batch
        /// </summary>
        public async Task<Ajuna.NetApi.Model.Types.Primitive.U32> MaxAcknowledgeBatch(CancellationToken token)
        {
            string parameters = GameRegistryStorage.MaxAcknowledgeBatchParams();
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> MaxQueueSizeParams
        ///  The maximum queue size for a game engine
        /// </summary>
        public static string MaxQueueSizeParams()
        {
            return RequestGenerator.GetStorage("GameRegistry", "MaxQueueSize", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> MaxQueueSize
        ///  The maximum queue size for a game engine
        /// </summary>
        public async Task<Ajuna.NetApi.Model.Types.Primitive.U8> MaxQueueSize(CancellationToken token)
        {
            string parameters = GameRegistryStorage.MaxQueueSizeParams();
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.Types.Primitive.U8>(parameters, token);
        }
        
        /// <summary>
        /// >> MaxGamesPerBlockParams
        ///  The maximum amount of games per block
        /// </summary>
        public static string MaxGamesPerBlockParams()
        {
            return RequestGenerator.GetStorage("GameRegistry", "MaxGamesPerBlock", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> MaxGamesPerBlock
        ///  The maximum amount of games per block
        /// </summary>
        public async Task<Ajuna.NetApi.Model.Types.Primitive.U8> MaxGamesPerBlock(CancellationToken token)
        {
            string parameters = GameRegistryStorage.MaxGamesPerBlockParams();
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.Types.Primitive.U8>(parameters, token);
        }
        
        /// <summary>
        /// >> GameQueuesParams
        ///  Store all queues for the games.
        /// </summary>
        public static string GameQueuesParams(Ajuna.NetApi.Model.PalletGameregistry.GameEngine key)
        {
            return RequestGenerator.GetStorage("GameRegistry", "GameQueues", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.Identity}, new Ajuna.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> GameQueues
        ///  Store all queues for the games.
        /// </summary>
        public async Task<Ajuna.NetApi.Model.PalletGameregistry.Queue> GameQueues(Ajuna.NetApi.Model.PalletGameregistry.GameEngine key, CancellationToken token)
        {
            string parameters = GameRegistryStorage.GameQueuesParams(key);
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.PalletGameregistry.Queue>(parameters, token);
        }
        
        /// <summary>
        /// >> GameRequirementsParams
        ///  Store all requirements for a sepecific game engine and its version.
        /// </summary>
        public static string GameRequirementsParams(Ajuna.NetApi.Model.PalletGameregistry.GameEngine key)
        {
            return RequestGenerator.GetStorage("GameRegistry", "GameRequirements", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.Identity}, new Ajuna.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> GameRequirements
        ///  Store all requirements for a sepecific game engine and its version.
        /// </summary>
        public async Task<BaseVec<Ajuna.NetApi.Model.PalletGameregistry.Requirement>> GameRequirements(Ajuna.NetApi.Model.PalletGameregistry.GameEngine key, CancellationToken token)
        {
            string parameters = GameRegistryStorage.GameRequirementsParams(key);
            return await _client.GetStorageAsync<BaseVec<Ajuna.NetApi.Model.PalletGameregistry.Requirement>>(parameters, token);
        }
        
        /// <summary>
        /// >> GameRegistryParams
        ///  Store all entries for the games.
        /// </summary>
        public static string GameRegistryParams(Ajuna.NetApi.Model.PrimitiveTypes.H256 key)
        {
            return RequestGenerator.GetStorage("GameRegistry", "GameRegistry", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.Identity}, new Ajuna.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> GameRegistry
        ///  Store all entries for the games.
        /// </summary>
        public async Task<Ajuna.NetApi.Model.PalletGameregistry.GameEntry> GameRegistry(Ajuna.NetApi.Model.PrimitiveTypes.H256 key, CancellationToken token)
        {
            string parameters = GameRegistryStorage.GameRegistryParams(key);
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.PalletGameregistry.GameEntry>(parameters, token);
        }
        
        /// <summary>
        /// >> NonceParams
        /// </summary>
        public static string NonceParams()
        {
            return RequestGenerator.GetStorage("GameRegistry", "Nonce", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> Nonce
        /// </summary>
        public async Task<Ajuna.NetApi.Model.Types.Primitive.U64> Nonce(CancellationToken token)
        {
            string parameters = GameRegistryStorage.NonceParams();
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.Types.Primitive.U64>(parameters, token);
        }
    }
    
    public sealed class GameRegistryCalls
    {
        
        /// <summary>
        /// >> queue
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Queue()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(17, "GameRegistry", 0, "queue", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> drop_game
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method DropGame(Ajuna.NetApi.Model.PrimitiveTypes.H256 game_hash, Ajuna.NetApi.Model.PalletGameregistry.GameEngine game_engine)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(game_hash.Encode());
            byteArray.AddRange(game_engine.Encode());
            return new Method(17, "GameRegistry", 1, "drop_game", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> ack_game
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method AckGame(Ajuna.NetApi.Model.PalletGameregistry.GameEngine cluster, BaseVec<Ajuna.NetApi.Model.PrimitiveTypes.H256> games, Ajuna.NetApi.Model.PrimitiveTypes.H256 shard_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(cluster.Encode());
            byteArray.AddRange(games.Encode());
            byteArray.AddRange(shard_id.Encode());
            return new Method(17, "GameRegistry", 2, "ack_game", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> ready_game
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ReadyGame(Ajuna.NetApi.Model.PrimitiveTypes.H256 game_hash)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(game_hash.Encode());
            return new Method(17, "GameRegistry", 3, "ready_game", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> finish_game
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method FinishGame(Ajuna.NetApi.Model.PrimitiveTypes.H256 game_hash, Ajuna.NetApi.Model.SpCore.AccountId32 winner)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(game_hash.Encode());
            byteArray.AddRange(winner.Encode());
            return new Method(17, "GameRegistry", 4, "finish_game", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> PlayerQueued
    /// Player has queued to play [player].
    /// </summary>
    public sealed class EventPlayerQueued : BaseTuple<Ajuna.NetApi.Model.SpCore.AccountId32>
    {
    }
    
    ///// <summary>
    ///// >> Game
    ///// Game Events
    ///// </summary>
    //public sealed class EventGame : BaseTuple<Ajuna.NetApi.PalletGameregistryEvent>
    //{
    //}
    
    public enum GameRegistryErrors
    {
        
        /// <summary>
        /// >> NoneValue
        /// An optional value returned nothing.
        /// </summary>
        NoneValue,
        
        /// <summary>
        /// >> StorageOverflow
        /// Storage overflowed.
        /// </summary>
        StorageOverflow,
        
        /// <summary>
        /// >> AckTooMany
        /// Too many games trying to acknowledge at once.
        /// </summary>
        AckTooMany,
        
        /// <summary>
        /// >> AckFail
        /// During Acknowledge of a waiting games there was an error.
        /// </summary>
        AckFail,
        
        /// <summary>
        /// >> NoGameQueue
        /// There is no game queue for the game engine version.
        /// </summary>
        NoGameQueue,
        
        /// <summary>
        /// >> NoGameEntry
        /// There is no such game entry.
        /// </summary>
        NoGameEntry,
        
        /// <summary>
        /// >> AlreadyQueued
        /// Player is already queued for a match.
        /// </summary>
        AlreadyQueued,
        
        /// <summary>
        /// >> GameQueueFull
        /// The game queue is full.
        /// </summary>
        GameQueueFull,
        
        /// <summary>
        /// >> GameRequirementsNotMet
        /// The game could not be queued due to failed requirements.
        /// </summary>
        GameRequirementsNotMet,
        
        /// <summary>
        /// >> InvalidWinner
        /// Invalid winner
        /// </summary>
        InvalidWinner,
        
        /// <summary>
        /// >> NotSignedByObserver
        /// Not Signed by an Observer
        /// </summary>
        NotSignedByObserver,
    }
}
